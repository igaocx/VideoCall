/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_vonchenchen_android_video_demos_codec_CodecWrapper */

#include "decoder.h"
#include "yuv_2_rgb.h"

#include "android_native_window.h"

//extern "C" {
#include <android/bitmap.h>
#include <android/native_window.h>
#include <android/native_window_jni.h>
//}

#ifndef _Included_com_vonchenchen_android_video_demos_codec_CodecWrapper
#define _Included_com_vonchenchen_android_video_demos_codec_CodecWrapper
#ifdef __cplusplus
extern "C" {
#endif

#include <libavutil/imgutils.h>

//enum AVPixelFormat pixelFormat = AV_PIX_FMT_BGR24;
enum AVPixelFormat pixelFormat = AV_PIX_FMT_RGB565LE;
int native_pix_format = PIXEL_FORMAT_RGB_565;

typedef struct _EnvPackage{
    JNIEnv *env;
    jobject *obj;
    jobject *surface;
} EnvPackage;
 ANativeWindow *aNativeWindow;
/*
 * Class:     com_vonchenchen_android_video_demos_codec_CodecWrapper
 * Method:    get_codec
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_vonchenchen_android_1video_1demos_codec_CodecWrapper_get_1codec
        (JNIEnv *env, jobject obj){
    decoder *p = new decoder();
    p->initialize(pixelFormat);
    return (long)p;
}

//#define VIDEOWIDTH 1280
//#define VIDEOHEIGHT 300
#define VIDEOWIDTH 480
#define VIDEOHEIGHT 272
int const IMG_FRAME_SIZE = VIDEOWIDTH * VIDEOHEIGHT * 3;

const short RGB565_MASK_RED = (0x1F)<<11;
const short RGB565_MASK_GREEN = (0x3F)<<5;
const short RGB565_MASK_BLUE = (0x1F);
void rgb5652bgr888(short *src, char *dest, int size){
    for(int i = 0; i<  size; i++){
        unsigned short RGB16 = *src;
        dest[i*3+2] = (RGB16&RGB565_MASK_RED) >> 11;
        dest[i*3+1] = (RGB16&RGB565_MASK_GREEN) >> 5;
        dest[i*3+0] = (RGB16&RGB565_MASK_BLUE);
        dest[i*3+2] <<= 3;
        dest[i*3+1] <<= 2;
        dest[i*3+0] <<= 3;
        src++;
    }
}

void handle_data(AVFrame *pFrame, void *param, void *ctx){

    RenderParam *renderParam = (RenderParam *)param;

    AVFrame	*rgbFrame = yuv420p_2_argb(pFrame, renderParam->swsContext, renderParam->avCodecContext, pixelFormat);//AV_PIX_FMT_RGB565LE

    LOGE("width %d height %d",rgbFrame->width, rgbFrame->height);

    EnvPackage *envPackage = (EnvPackage *)ctx;

    if(aNativeWindow==NULL){
        aNativeWindow = ANativeWindow_fromSurface(envPackage->env, *(envPackage->surface));
    }
    VoutInfo voutInfo;
    voutInfo.buffer = rgbFrame->data[0];
    voutInfo.buffer_width = rgbFrame->width;
    voutInfo.buffer_height = rgbFrame->height;
    voutInfo.pix_format = native_pix_format;

    android_native_window_display(aNativeWindow, &voutInfo);

    av_free(rgbFrame->data[0]);
    av_free(rgbFrame);
}

/*
 * Class:     com_vonchenchen_android_video_demos_codec_CodecWrapper
 * Method:    decode_stream
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_com_vonchenchen_android_1video_1demos_codec_CodecWrapper_decode_1stream
        (JNIEnv *env, jobject obj,jbyteArray jdata, jint length, jlong this_obj_long, jobject surface){

    decoder *this_obj = (decoder *)this_obj_long;
    jbyte *cdata = env->GetByteArrayElements(jdata, JNI_FALSE);

    if(cdata != NULL) {
        EnvPackage package;
        package.env = env;
        package.obj = &obj;
        package.surface = &surface;
        //decode h264 cdata to yuv and save yuv data to avFrame which would be passed to handle_data
        this_obj->decodeFrame((uint8_t *)cdata, length, handle_data, &package);
        LOGE("decode length: %d ", length);
    }else{
        LOGE("stream data is NULL");
    }
    env->ReleaseByteArrayElements(jdata, cdata, 0);
}

/*
 * Class:     com_vonchenchen_android_video_demos_codec_CodecWrapper
 * Method:    release_codec
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_vonchenchen_android_1video_1demos_codec_CodecWrapper_release_1codec
        (JNIEnv *env, jobject obj, long this_obj_long){
    decoder *this_obj = (decoder *)this_obj_long;
    this_obj->close();
    if(aNativeWindow!=NULL){
        ANativeWindow_release(aNativeWindow);
        }
    delete this_obj;
}
#ifdef __cplusplus
}
#endif
#endif
